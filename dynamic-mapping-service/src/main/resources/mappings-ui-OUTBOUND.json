[
  {
    "id": "1925809",
    "identifier": "f7jkg9",
    "name": "Mapping - 151",
    "publishTopic": "evt/outbound/#",
    "publishTopicSample": "evt/outbound/berlin_01",
    "targetAPI": "EVENT",
    "direction": "OUTBOUND",
    "sourceTemplate": "{\"type\":\"c8y_BusEvent\",\"text\":\"Bus was stopped\",\"time\":\"2022-08-05T00:14:49.389+02:00\",\"bus_event\":\"stop_event\"}",
    "targetTemplate": "{\"deviceId\":\"909090\",\"description\":\"This is a new test event.\",\"time\":\"2022-08-05T00:14:49.389+02:00\",\"eventType\":\"TestEvent\",\"bus_event\":\"stop_event\"}",
    "mappingType": "JSON",
    "substitutions": [
      {
        "pathSource": "_IDENTITY_.c8ySourceId",
        "pathTarget": "_TOPIC_LEVEL_[2]",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "type",
        "pathTarget": "eventType",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "$now()",
        "pathTarget": "time",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "bus_event",
        "pathTarget": "bus_event",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "_IDENTITY_.externalId",
        "pathTarget": "deviceId",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      }
    ],
    "active": false,
    "debug": false,
    "tested": false,
    "supportsMessageContext": false,
    "createNonExistingDevice": false,
    "updateExistingDevice": false,
    "autoAckOperation": true,
    "useExternalId": true,
    "externalIdType": "c8y_Serial",
    "snoopStatus": "NONE",
    "snoopedTemplates": [],
    "filterMapping": "bus_event",
    "qos": "AT_LEAST_ONCE",
    "lastUpdate": 1735161611965,
    "genericDeviceIdentifier": "_IDENTITY_.externalId"
  },
  {
    "id": "6826997",
    "identifier": "cxxlmh",
    "name": "Mapping - 152",
    "publishTopic": "evt/outbound/#",
    "publishTopicSample": "evt/outbound/berlin_01",
    "targetAPI": "OPERATION",
    "direction": "OUTBOUND",
    "sourceTemplate": "{\"bus_opp\":\"New engine restart operation!\"}",
    "targetTemplate": "{\"c8y_Id\":\"909090\",\"decription\":\"dummy operation\",\"type\":\"bus_operation\"}",
    "mappingType": "JSON",
    "substitutions": [
      {
        "pathSource": "_IDENTITY_.c8ySourceId",
        "pathTarget": "c8y_Id",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "bus_opp",
        "pathTarget": "decription",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      },
      {
        "pathSource": "_IDENTITY_.externalId",
        "pathTarget": "_TOPIC_LEVEL_[2]",
        "repairStrategy": "DEFAULT",
        "expandArray": false
      }
    ],
    "active": false,
    "debug": false,
    "tested": false,
    "supportsMessageContext": false,
    "createNonExistingDevice": false,
    "updateExistingDevice": false,
    "autoAckOperation": true,
    "useExternalId": true,
    "externalIdType": "c8y_Serial",
    "snoopStatus": "NONE",
    "snoopedTemplates": [],
    "filterMapping": "bus_opp",
    "qos": "AT_LEAST_ONCE",
    "lastUpdate": 1735162008771,
    "genericDeviceIdentifier": "_IDENTITY_.externalId"
  },
  {
    "id": "5774279",
    "identifier": "bye1yc",
    "name": "Mapping - 155",
    "publishTopic": "measurement/measurements",
    "publishTopicSample": "measurement/measurements",
    "targetAPI": "EVENT",
    "direction": "OUTBOUND",
    "sourceTemplate": "{\"text\":\"This is a new test event.\",\"time\":\"2022-08-05T00:14:49.389+02:00\",\"type\":\"c8y_TestEvent\"}",
    "targetTemplate": "{\"type\":\"c8y_AnyType\"}",
    "mappingType": "CODE_BASED",
    "substitutions": [],
    "active": false,
    "debug": false,
    "tested": false,
    "supportsMessageContext": true,
    "createNonExistingDevice": false,
    "updateExistingDevice": false,
    "autoAckOperation": true,
    "useExternalId": false,
    "externalIdType": "c8y_Serial",
    "snoopStatus": "NONE",
    "snoopedTemplates": [],
    "filterMapping": "$exists(time)",
    "filterInventory": "type = \"wika_PGW23\"",
    "qos": "AT_LEAST_ONCE",
    "code": "",
    "lastUpdate": 1743531196281
  }
]