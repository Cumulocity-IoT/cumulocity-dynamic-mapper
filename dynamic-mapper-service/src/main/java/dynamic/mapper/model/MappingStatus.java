/*
 * Copyright (c) 2022-2025 Cumulocity GmbH.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  @authors Christof Strack, Stefan Witschel
 *
 */

package dynamic.mapper.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

import jakarta.validation.constraints.NotNull;
import java.io.Serializable;

import io.swagger.v3.oas.annotations.media.Schema;

@Getter
@NoArgsConstructor
@AllArgsConstructor
@ToString(exclude = {})
@Schema(description = "Mapping execution statistics and status information")
public class MappingStatus implements Serializable {

    public static MappingStatus UNSPECIFIED_MAPPING_STATUS;
    public static final String IDENT_UNSPECIFIED_MAPPING = "UNSPECIFIED";

    static {
        UNSPECIFIED_MAPPING_STATUS = new MappingStatus(IDENT_UNSPECIFIED_MAPPING, IDENT_UNSPECIFIED_MAPPING,
                IDENT_UNSPECIFIED_MAPPING, null, "#", "#", 0, 0, 0,0,
                0, null);
    }

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Unique identifier for the mapping generated by Cumulocity Core", example = "34573838974")
    @NotNull
    public String id;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Display name of the mapping", example = "Temperature Sensor Data Mapping")
    @NotNull
    public String name;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Generated identifier for the mapping", example = "l19zjk")
    @NotNull
    public String identifier;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Direction of data flow for this mapping", implementation = Direction.class, example = "INBOUND")
    @NotNull
    public Direction direction;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Topic pattern for incoming messages", example = "sensors/+/data")
    @NotNull
    public String mappingTopic;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Topic pattern for outbound publishing", example = "device/+/temperature")
    @NotNull
    public String publishTopic;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Total number of messages processed by this mapping", example = "1247")
    @NotNull
    public long messagesReceived;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Total number of processing errors", example = "3")
    @NotNull
    public long errors = 0;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Current consecutive failure count", example = "0")
    @NotNull
    public long currentFailureCount = 0;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Number of currently active snooped templates", example = "5")
    @NotNull
    public long snoopedTemplatesActive;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Total number of snooped templates collected", example = "10")
    @NotNull
    public long snoopedTemplatesTotal;

    @Schema(requiredMode = Schema.RequiredMode.REQUIRED, description = "Error message if mapping failed to load", example = "Invalid JSON template")
    @NotNull
    @Setter
    public String loadingError;

    @Override
    public boolean equals(Object m) {
        return (m instanceof MappingStatus) && id == ((MappingStatus) m).id;
    }

    public void reset() {
        messagesReceived = 0;
        errors = 0;
        loadingError = "";
        snoopedTemplatesActive = 0;
        snoopedTemplatesTotal = 0;
    }
}